import React, { useState, useEffect } from "react";
import "./../../styles/profile.css";
import Alert from "../../component/Alert";
import "../../styles/alert.css";
import Header from "../../component/header";
import Footer from "../../component/footer";
import { studentApi } from "../../utils/api";

const Profile = () => {
  const [profileData, setProfileData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [complaints, setComplaints] = useState([]);

  // State for editing and complaint management
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState(null);
  const [showComplaintForm, setShowComplaintForm] = useState(false);
  const [complaintType, setComplaintType] = useState("");
  const [complaintDesc, setComplaintDesc] = useState("");
  const [alert, setAlert] = useState({ open: false, type: "info", message: "" });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [profileRes, complaintsRes] = await Promise.all([
          studentApi.getProfile(),
          studentApi.getComplaints()
        ]);
        
        setProfileData(profileRes.data);
        setComplaints(complaintsRes.data);
        setLoading(false);
      } catch (err) {
        setAlert({
          open: true,
          type: "error",
          message: "Error loading profile data"
        });
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleEdit = () => {
    setIsEditing(true);
    setEditedData(profileData);
  };

  const handleSave = async () => {
    try {
      await studentApi.updateProfile(editedData);
      setProfileData(editedData);
      setIsEditing(false);
      setAlert({ 
        open: true, 
        type: "success", 
        message: "Profile updated successfully!" 
      });
    } catch (err) {
      setAlert({
        open: true,
        type: "error",
        message: err.response?.data?.message || "Error updating profile"
      });
    }
  };

  const handleCancel = () => {
    setIsEditing(false);
    setEditedData(profileData);
  };

  const handleChange = (field, value) => {
    setEditedData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAvatarChange = (e) => {
    // Handle avatar change logic
  };

  const handleSubmitComplaint = async () => {
    if (!complaintType || !complaintDesc) {
      setAlert({ 
        open: true, 
        type: "error", 
        message: "Please select a type and enter a description." 
      });
      return;
    }

    try {
      const response = await studentApi.submitComplaint({
        type: complaintType,
        description: complaintDesc
      });

      setComplaints(prev => [...prev, response.data]);
      setShowComplaintForm(false);
      setComplaintType("");
      setComplaintDesc("");
      setAlert({ 
        open: true, 
        type: "success", 
        message: "Complaint submitted successfully!" 
      });
    } catch (err) {
      setAlert({
        open: true,
        type: "error",
        message: err.response?.data?.message || "Error submitting complaint"
      });
    }
  };

  return (
    <>
      <Header />
      <Alert
        open={alert.open}
        type={alert.type}
        message={alert.message}
        onClose={() => setAlert({ ...alert, open: false })}
        duration={3000}
      />
      <div className="profile-dashboard">
        {loading ? (
          <div className="loading">Loading profile data...</div>
        ) : !profileData ? (
          <div className="error-message">Failed to load profile data</div>
        ) : (
          <>
            <div className="profile-dashboard-header">
              <div className="profile-avatar-wrapper">
                <img
                  src={profileData.profilePic}
                  alt="Profile"
                  className="profile-dashboard-avatar"
                />
                <span className="profile-avatar-icon">
                  <i className="fi fi-rr-user"></i>
                </span>
                <label className="profile-avatar-plus">
                  <i className="fi fi-rr-plus"></i>
                  <input
                    type="file"
                    accept="image/*"
                    style={{ display: "none" }}
                    onChange={handleAvatarChange}
                  />
                </label>
              </div>
              <div>
                <div className="profile-header-top">
                  <h2>{profileData.name}</h2>
                  <button 
                    className="edit-profile-btn"
                    onClick={isEditing ? handleSave : handleEdit}
                  >
                    <i className={`fi fi-rr-${isEditing ? 'save' : 'edit'}`}></i>
                    {isEditing ? 'Save' : 'Edit'}
                  </button>
                </div>
                <p className="profile-dashboard-status">
                  {profileData.allocationStatus === "Allocated" ? (
                    <span className="allocated">Allocated</span>
                  ) : (
                    <span className="pending">Pending</span>
                  )}
                </p>
                <div className="profile-dashboard-meta">
                  <span>{profileData.regNumber}</span> | <span>{profileData.level} Level</span>
                </div>
              </div>
            </div>

            <div className="profile-dashboard-cards">
              <div className="profile-dashboard-card">
                <h4>Hostel</h4>
                <p>{profileData.hostel || 'Not Allocated'}</p>
              </div>
              <div className="profile-dashboard-card">
                <h4>Room</h4>
                <p>{profileData.roomNumber || 'Not Assigned'}</p>
              </div>
              <div className="profile-dashboard-card">
                <h4>Roommate</h4>
                <p>{profileData.roommate || 'Not Assigned'}</p>
              </div>
              <div className="profile-dashboard-card">
                <h4>Personality</h4>
                <p>{profileData.personality?.type || 'Not Set'}</p>
              </div>
            </div>

            <div className="profile-dashboard-sections">
              <div className="profile-dashboard-section">
                <h3>Personal Information</h3>
                <div className="profile-dashboard-info-grid">
                  <div>
                    <strong>Email:</strong>
                    {isEditing ? (
                      <input
                        type="email"
                        value={editedData?.email || ''}
                        onChange={(e) => handleChange('email', e.target.value)}
                        className="edit-input"
                      />
                    ) : (
                      <span>{profileData.email}</span>
                    )}
                  </div>
                  <div>
                    <strong>Phone:</strong>
                    {isEditing ? (
                      <input
                        type="tel"
                        value={editedData?.phone || ''}
                        onChange={(e) => handleChange('phone', e.target.value)}
                        className="edit-input"
                      />
                    ) : (
                      <span>{profileData.phone}</span>
                    )}
                  </div>
                  <div>
                    <strong>Gender:</strong>
                    <span>{profileData.gender}</span>
                  </div>
                  <div>
                    <strong>Department:</strong>
                    <span>{profileData.department}</span>
                  </div>
                </div>
              </div>

              <div className="profile-dashboard-section">
                <h3>Hostel Allocation</h3>
                <div className="profile-dashboard-info-grid">
                  <div>
                    <strong>Status:</strong>
                    <span className={profileData.allocationStatus === "Allocated" ? "allocated" : "pending"}>
                      {profileData.allocationStatus || 'Not Applied'}
                    </span>
                  </div>
                  <div>
                    <strong>Hostel:</strong>
                    <span>{profileData.hostel || 'Not Allocated'}</span>
                  </div>
                  <div>
                    <strong>Room Number:</strong>
                    <span>{profileData.roomNumber || 'Not Assigned'}</span>
                  </div>
                  <div>
                    <strong>Roommate:</strong>
                    <span>{profileData.roommate || 'Not Assigned'}</span>
                  </div>
                  <div>
                    <strong>Application Date:</strong>
                    <span>{profileData.applicationDate || 'Not Applied'}</span>
                  </div>
                </div>
              </div>

              {profileData.personality && (
                <div className="profile-dashboard-section">
                  <h3>Personality & Preferences</h3>
                  <div className="personality-content">
                    <div className="mbti-badge">{profileData.personality.type}</div>
                    <div className="traits-tags">
                      {profileData.personality.traits?.map(trait => (
                        <span key={trait} className="trait-tag">
                          <i className="fi fi-rr-star"></i> {trait}
                        </span>
                      ))}
                    </div>
                    <p className="bio-text">
                      <i className="fi fi-rr-quote-right"></i> {profileData.personality.bio}
                    </p>
                  </div>
                </div>
              )}

              {profileData.roommateMatch && (
                <div className="profile-dashboard-section">
                  <h3>Roommate Match</h3>
                  <div className="roommate-match-content">
                    <div className="compatibility-score">
                      <div className="score-circle">
                        <span>{profileData.roommateMatch.compatibility}%</span>
                        <small>Match</small>
                      </div>
                    </div>
                    <p className="match-reason">{profileData.roommateMatch.matchReason}</p>
                    <table className="matching-traits-table">
                      <thead>
                        <tr>
                          <th>Trait</th>
                          <th>You</th>
                          <th>Roommate</th>
                        </tr>
                      </thead>
                      <tbody>
                        {profileData.roommateMatch.matchingTraits?.map(item => (
                          <tr key={item.trait}>
                            <td>{item.trait}</td>
                            <td>{item.student}</td>
                            <td>{item.roommate}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                    <button className="view-roommate-btn">
                      <i className="fi fi-rr-user"></i> View Roommate Profile
                    </button>
                  </div>
                </div>
              )}

              <div className="profile-dashboard-section complaints-section">
                <div className="section-header">
                  <h3>Complaints & Feedback</h3>
                  <button className="new-complaint-btn" onClick={() => setShowComplaintForm(true)}>
                    <i className="fi fi-rr-plus"></i> New Complaint
                  </button>
                </div>

                {showComplaintForm && (
                  <div className="complaint-form">
                    <select 
                      className="complaint-input" 
                      value={complaintType} 
                      onChange={(e) => setComplaintType(e.target.value)}
                    >
                      <option value="">Select Type</option>
                      <option value="Maintenance">Maintenance</option>
                      <option value="Roommate">Roommate</option>
                      <option value="Facilities">Facilities</option>
                      <option value="Other">Other</option>
                    </select>
                    <textarea 
                      className="complaint-input" 
                      placeholder="Describe your complaint..."
                      value={complaintDesc}
                      onChange={(e) => setComplaintDesc(e.target.value)}
                    ></textarea>
                    <div className="complaint-form-actions">
                      <button className="cancel-btn" onClick={() => setShowComplaintForm(false)}>
                        <i className="fi fi-rr-cross"></i> Cancel
                      </button>
                      <button className="submit-btn" onClick={handleSubmitComplaint}>
                        <i className="fi fi-rr-check"></i> Submit
                      </button>
                    </div>
                  </div>
                )}

                <div className="complaints-list">
                  {complaints.map(complaint => (
                    <div key={complaint.id} className={`complaint-card ${complaint.status.toLowerCase()}`}>
                      <div className="complaint-header">
                        <span className="complaint-type">
                          <i className="fi fi-rr-tools"></i> {complaint.type}
                        </span>
                        <span className={`complaint-status ${complaint.status.toLowerCase()}`}>
                          {complaint.status}
                        </span>
                      </div>
                      <p className="complaint-desc">{complaint.description}</p>
                      {complaint.response && (
                        <div className="complaint-response">
                          <strong>Response:</strong> {complaint.response}
                        </div>
                      )}
                      <div className="complaint-footer">
                        <span className="complaint-date">
                          <i className="fi fi-rr-calendar"></i> {complaint.date}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {isEditing && (
              <div className="edit-actions">
                <button className="cancel-btn" onClick={handleCancel}>
                  <i className="fi fi-rr-cross"></i> Cancel
                </button>
                <button className="save-btn" onClick={handleSave}>
                  <i className="fi fi-rr-check"></i> Save Changes
                </button>
              </div>
            )}
          </>
        )}
      </div>
      <Footer />
    </>
  );
};

export default Profile;
